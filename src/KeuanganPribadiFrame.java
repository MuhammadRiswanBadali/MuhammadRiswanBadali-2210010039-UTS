// Import library yang dibutuhkan untuk melakukan operasi file, database, dan GUI
import java.io.BufferedReader; // Untuk membaca data dari file
import java.io.File; // Untuk bekerja dengan file
import java.io.FileReader; // Untuk membaca file
import java.io.PrintWriter; // Untuk menulis ke file
import java.sql.Connection; // Untuk membuat koneksi ke database
import java.sql.PreparedStatement; // Untuk menjalankan query dengan parameter
import java.text.SimpleDateFormat; // Untuk format tanggal
import java.sql.ResultSet; // Untuk menyimpan hasil query
import java.sql.Statement; // Untuk menjalankan query tanpa parameter
import javax.swing.JOptionPane; // Untuk menampilkan pesan dialog
import javax.swing.table.DefaultTableModel; // Untuk model tabel di JTable
import java.sql.SQLException; // Untuk menangani error SQL
import javax.swing.JFileChooser; // Untuk memilih file melalui dialog file

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author USER
 */
public class KeuanganPribadiFrame extends javax.swing.JFrame {

    /**
     * Creates new form KeuanganPribadiFrame
     */
    public KeuanganPribadiFrame() {
        initComponents();
        tampilkanData(); // Memanggil method tampilData()
        hitungTotal(); // Memanggil method hitungTotal()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Panel Input "));

        jLabel3.setText("Nominal (Rp.) :");

        jButton1.setText("Tambah Transaksi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~Pilih Kategori Transaksi~", "Pemasukan", "Pengeluaran" }));

        jLabel2.setText("Kategori Transaksi :");

        jLabel5.setText("Keterangan :");

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("Tanggal :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton1))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Aplikasi Keuangan Pribadi");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Kategori Transaksi", "Nominal (Rp.)", "Tanggal", "Keterangan", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pemasukan"));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText(".....");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Pengeluaran"));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText(".....");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
        );

        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hapus");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Simpan Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter Data"));

        jLabel10.setText("Cari Berdasarkan Kategori Transaksi :");

        jLabel11.setText("Cari Berdasarkan Tanggal :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~Pilih Kategori~", "Pemasukan", "Pengeluaran" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });

        jButton6.setText("Clear");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jButton7.setText("Reset Data");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Import Data");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(jLabel1)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       tambahTransaksi(); // Memanggil method tambahTransaksi()
       tampilkanData(); // Memanggil method tampilkanData()
       hitungTotal(); // Memanggil method hitungTotal()
    }//GEN-LAST:event_jButton1ActionPerformed
    
    // Event handler ketika baris di jTable1 diklik
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
         // Mendapatkan baris yang dipilih dari jTable1
        int selectedRow = jTable1.getSelectedRow();
         // Jika ada baris yang dipilih
        if (selectedRow != -1) {
            // Ambil data dari baris yang dipilih
            String kategori = jTable1.getValueAt(selectedRow, 0).toString(); // Kategori transaksi (kolom pertama)
            String nominal = jTable1.getValueAt(selectedRow, 1).toString(); // Nominal transaksi (kolom kedua)
            String tanggal = jTable1.getValueAt(selectedRow, 2).toString(); // Tanggal transaksi (kolom ketiga, format dd-MM-yyyy)
            String keterangan = jTable1.getValueAt(selectedRow, 3).toString(); // Keterangan transaksi (kolom keempat)
            // Memasukkan data yang dipilih ke komponen input (seperti JComboBox, JTextField, dan JDateChooser)
            jComboBox1.setSelectedItem(kategori); // Menampilkan kategori di JComboBox
            jTextField1.setText(nominal); // Menampilkan nominal di JTextField
            // Mengonversi string tanggal dari format dd-MM-yyyy ke objek java.util.Date
            try {
                java.util.Date date = new SimpleDateFormat("dd-MM-yyyy").parse(tanggal);  // Parsing tanggal
                jDateChooser1.setDate(date);  // Menampilkan tanggal di JDateChooser
            } catch (Exception e) {
                 // Menangani error jika terjadi kesalahan saat parsing tanggal
                System.out.println("Error parsing date: " + e.getMessage());
            }
            // Menampilkan keterangan di JTextField
            jTextField2.setText(keterangan);
        }
    }//GEN-LAST:event_jTable1MouseClicked
    
// Event handler ketika tombol jButton2 diklik
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Mendapatkan baris yang dipilih dari jTable1
        int selectedRow = jTable1.getSelectedRow();
        // Cek jika ada baris yang dipilih
        if (selectedRow != -1) {
            // Validasi kategori transaksi, pastikan kategori yang dipilih valid
            if (jComboBox1.getSelectedIndex() == 0) {
                // Jika kategori tidak valid, tampilkan pesan peringatan
                JOptionPane.showMessageDialog(this, "Pilih kategori transaksi yang valid.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return; // Hentikan proses jika kategori tidak valid
            }
             // Validasi input nominal tidak boleh kosong
            if (jTextField1.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nominal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return; // Hentikan proses jika nominal kosong
            }
             // Validasi apakah tanggal telah dipilih
            if (jDateChooser1.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Tanggal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return; // Hentikan proses jika tanggal kosong
            }
            // Validasi keterangan tidak boleh kosong
            if (jTextField2.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Keterangan tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;  // Hentikan proses jika keterangan kosong
            }
            // Tampilkan dialog konfirmasi untuk memastikan perubahan transaksi
            int response = JOptionPane.showConfirmDialog(null, 
                "Yakin melakukan perubahan?", "Konfirmasi", 
                JOptionPane.YES_NO_OPTION);
            // Jika pengguna memilih "Yes", lanjutkan dengan update
            if (response == JOptionPane.YES_OPTION) {
                // Ambil data dari input
                String kategori = jComboBox1.getSelectedItem().toString();
                int nominal = Integer.parseInt(jTextField1.getText().trim());
                String tanggal = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate());
                String keterangan = jTextField2.getText().trim();
                // Ambil ID transaksi dari baris yang dipilih di tabel
                String idTransaksi = jTable1.getValueAt(selectedRow, 4).toString(); // Pastikan kolom ID ditambahkan ke tabel
                // SQL query untuk mengupdate transaksi di database
                String sql = "UPDATE transaksi SET kategori = ?, nominal = ?, tanggal = ?, keterangan = ? WHERE id = ?";
                try (Connection conn = DatabaseConnection.connect(); // Membuka koneksi ke database
                    PreparedStatement pstmt = conn.prepareStatement(sql)) { // Menyiapkan statement SQL untuk eksekusi
                    // Set parameter untuk prepared statement
                    pstmt.setString(1, kategori);
                    pstmt.setInt(2, nominal);
                    pstmt.setString(3, tanggal);
                    pstmt.setString(4, keterangan);
                    pstmt.setInt(5, Integer.parseInt(idTransaksi));
                    // Eksekusi update transaksi
                    pstmt.executeUpdate();
                   // Setelah update, refresh data tabel dan hitung total
                    tampilkanData();
                    hitungTotal();
                    // Tampilkan pesan informasi jika transaksi berhasil diperbarui
                    JOptionPane.showMessageDialog(null, "Transaksi berhasil diperbarui.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                    
                    // Kosongkan input setelah transaksi diedit
                    jTextField1.setText(""); // Kosongkan nominal
                    jDateChooser1.setDate(null); // Kosongkan tanggal
                    jTextField2.setText(""); // Kosongkan keterangan
                    jComboBox1.setSelectedIndex(0);  // Kembali ke pilihan "Pilih Kategori Transaksi"
                } catch (Exception e) {
                     // Tangani jika terjadi kesalahan dalam proses update
                    JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat memperbarui transaksi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            // Jika tidak ada baris yang dipilih di tabel, tampilkan pesan peringatan
            JOptionPane.showMessageDialog(null, "Pilih data dari tabel terlebih dahulu.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Event handler untuk tombol jButton5 yang berfungsi untuk mengosongkan input dan menampilkan data ulang
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       // Mengosongkan jTextField1
        jTextField1.setText("");
        // Mengosongkan jDateChooser1
        jDateChooser1.setDate(null);
        // Mengosongkan jTextField2
        jTextField2.setText("");
        // Reset jComboBox1 ke default
        jComboBox1.setSelectedIndex(0); // Pastikan indeks 0 adalah "~pilih kategori transaksi~"
        tampilkanData();// Memanggil fungsi tampilkanData untuk menampilkan data transaksi
    }//GEN-LAST:event_jButton5ActionPerformed
    
    // Event handler ketika tombol jButton3 diklik (fungsi untuk menghapus transaksi)
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       // Mendapatkan baris yang dipilih dari jTable1
       int selectedRow = jTable1.getSelectedRow();
       // Jika tidak ada baris yang dipilih, tampilkan pesan peringatan dan hentikan proses
       if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin dihapus.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Mendapatkan ID transaksi dari baris yang dipilih di jTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String idTransaksi = model.getValueAt(selectedRow, 4).toString(); // ID transaksi ada di kolom ke-5
         // Menampilkan dialog konfirmasi untuk memastikan penghapusan transaksi
        int response = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus transaksi ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
         // Jika pengguna memilih "Yes", lanjutkan dengan penghapusan
        if (response == JOptionPane.YES_OPTION) {
            try (Connection conn = DatabaseConnection.connect()) {
                // SQL query untuk menghapus data dari database berdasarkan ID transaksi
                String sql = "DELETE FROM transaksi WHERE id = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                      // Set parameter ID transaksi pada query
                    pstmt.setInt(1, Integer.parseInt(idTransaksi));
                     // Eksekusi perintah hapus (DELETE) pada database
                    pstmt.executeUpdate();
                }
                // Hapus baris dari jTable1 setelah transaksi berhasil dihapus dari database
                model.removeRow(selectedRow);
                // Perbarui total pemasukan dan pengeluaran setelah penghapusan
                hitungTotal();
                 // Tampilkan pesan bahwa transaksi berhasil dihapus
                JOptionPane.showMessageDialog(this, "Transaksi berhasil dihapus.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                
                // Kosongkan input setelah transaksi dihapus
                jTextField1.setText(""); // Kosongkan nominal
                jDateChooser1.setDate(null); // Kosongkan tanggal
                jTextField2.setText(""); // Kosongkan keterangan
                jComboBox1.setSelectedIndex(0);  // Kembali ke pilihan "Pilih Kategori Transaksi"
            } catch (SQLException e) {
                 // Menangani error jika terjadi kesalahan saat menghapus transaksi
                JOptionPane.showMessageDialog(this, "Error saat menghapus transaksi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    // Event handler untuk jTextField1 hanya dapat memasukkan angka
    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // Mengambil karakter yang ditekan
        char c = evt.getKeyChar();
         // Memeriksa apakah karakter yang ditekan bukan angka
        if (!Character.isDigit(c)) { 
            // Jika karakter bukan angka, batalkan karakter agar tidak muncul di jTextField1
            evt.consume();
        }    
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Memanggil fungsi simpanDataKeCSV untuk menyimpan data dari jTable1 ke file CSV
        simpanDataKeCSV();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // Memanggil fungsi filterData untuk memfilter data berdasarkan pilihan di jComboBox2
        filterData();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        // Memanggil fungsi filterData untuk memfilter data berdasarkan tanggal yang dipilih di jDateChooser2
        filterData();
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
         // Memanggil fungsi resetFilters untuk menghapus filter yang diterapkan dan menampilkan semua data
        resetFilters();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Memanggil fungsi resetData untuk mengatur ulang data ke kondisi awal (jika ada perubahan)
        resetData();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Memanggil fungsi importData untuk mengimpor data ke dalam aplikasi
        importData();
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KeuanganPribadiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KeuanganPribadiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KeuanganPribadiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KeuanganPribadiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeuanganPribadiFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void tambahTransaksi() {
        // Validasi kategori transaksi
        if (jComboBox1.getSelectedIndex() == 0) { // Periksa apakah kategori yang dipilih adalah pilihan default
            JOptionPane.showMessageDialog(this, "Pilih kategori transaksi yang valid.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return; // Hentikan proses jika kategori tidak valid
        }
        
        // Validasi apakah input kosong
        if (jTextField1.getText().trim().isEmpty()) { // Periksa jika jTextField1 kosong setelah di-trim
            JOptionPane.showMessageDialog(this, "Nominal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;  // Hentikan proses jika nominal kosong
        }
        // Validasi apakah input tanggal kosong
        if (jDateChooser1.getDate() == null) { // Periksa apakah jDateChooser1 belum dipilih
            JOptionPane.showMessageDialog(this, "Tanggal tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return; // Hentikan proses jika tanggal kosong
        }
        // Validasi apakah input keterangan kosong
        if (jTextField2.getText().trim().isEmpty()) { // Periksa jika jTextField2 kosong setelah di-trim
            JOptionPane.showMessageDialog(this, "Keterangan tidak boleh kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;//Hentikan proses jika keterangan kosong 
        }
        
        // Jika semua input sudah diisi dengan benar, lanjutkan ke penyimpanan data
        String kategori = jComboBox1.getSelectedItem().toString(); // Dapatkan kategori yang dipilih dari jComboBox1
        int nominal = Integer.parseInt(jTextField1.getText().trim()); // Konversi input nominal ke integer
        String tanggal = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate()); // Format tanggal menjadi yyyy-MM-dd
        String keterangan = jTextField2.getText().trim(); // Dapatkan input keterangan yang telah di-trim
        // Query SQL untuk memasukkan data transaksi ke dalam tabel database
        String sql = "INSERT INTO transaksi(kategori, nominal, tanggal, keterangan) VALUES(?,?,?,?)";

        try (Connection conn = DatabaseConnection.connect(); // Membuka koneksi ke database
             PreparedStatement pstmt = conn.prepareStatement(sql)) { // Mempersiapkan query dengan PreparedStatement
            pstmt.setString(1, kategori); // Set nilai kategori pada parameter pertama
            pstmt.setInt(2, nominal); // Set nilai nominal pada parameter kedua
            pstmt.setString(3, tanggal); // Set nilai tanggal pada parameter ketiga
            pstmt.setString(4, keterangan); // Set nilai keterangan pada parameter keempat
            pstmt.executeUpdate(); // Eksekusi query untuk menyimpan data ke database

            JOptionPane.showMessageDialog(this, "Transaksi berhasil ditambahkan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
             // Refresh tabel dan hitung ulang total setelah transaksi ditambahkan
            tampilkanData(); // Tampilkan data terbaru di tabel
            hitungTotal(); // Hitung ulang total pemasukan dan pengeluaran
            // Kosongkan input setelah transaksi ditambahkan
            jTextField1.setText(""); // Kosongkan jTextField1
            jDateChooser1.setDate(null); // Kosongkan jDateChooser1
            jTextField2.setText(""); // Kosongkan jTextField2
            jComboBox1.setSelectedIndex(0);  // Kembali ke pilihan "Pilih Kategori Transaksi"
        } catch (Exception e) { // Tangani exception jika terjadi kesalahan saat menyimpan data
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void tampilkanData() {
        // Ambil model dari jTable1 agar kita bisa mengatur datanya
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Hapus semua data yang ada di tabel sebelum menambahkan data baru

        String sql = "SELECT * FROM transaksi";  // Query untuk mengambil semua data dari tabel transaksi
        try (Connection conn = DatabaseConnection.connect(); // Buka koneksi ke database
             Statement stmt = conn.createStatement(); // Buat pernyataan SQL
             ResultSet rs = stmt.executeQuery(sql)) { // Jalankan query dan simpan hasilnya di rs       
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy"); // Format tanggal untuk ditampilkan di tabel
            // Loop melalui setiap baris data di hasil query
            while (rs.next()) {
                String kategori = rs.getString("kategori"); // Ambil data kategori
                int nominal = rs.getInt("nominal"); // Ambil data nominal
                String tanggal = rs.getString("tanggal"); // Ambil data tanggal dalam format database            
                // Konversi tanggal dari format yyyy-MM-dd ke format dd-MM-yyyy
                String formattedDate = "";  // Siapkan variabel untuk menyimpan tanggal yang sudah diformat
                try {
                    java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(tanggal); // Ubah string tanggal ke tipe Date
                    formattedDate = dateFormat.format(date); // Format tanggal menjadi dd-MM-yyyy
                } catch (Exception e) {
                    System.out.println("Error parsing date: " + e.getMessage()); // Tampilkan pesan jika terjadi kesalahan saat memformat tanggal
                }
                String keterangan = rs.getString("keterangan"); // Ambil data keterangan
                int id = rs.getInt("id");  // Ambil data ID transaksi          
                // Tambahkan baris data ke tabel
                model.addRow(new Object[]{kategori, nominal, formattedDate, keterangan, id});
            }
        } catch (Exception e) {
            System.out.println(e.getMessage()); // Tampilkan pesan jika terjadi kesalahan koneksi atau query
        }
        // Sembunyikan kolom ID di jTable1
        jTable1.getColumnModel().getColumn(4).setMinWidth(0);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(4).setWidth(0);
    }
    
    private void hitungTotal() {
        int totalPemasukan = 0; // Variabel untuk menyimpan total pemasukan
        int totalPengeluaran = 0; // Variabel untuk menyimpan total pengeluaran

        String sql = "SELECT kategori, nominal FROM transaksi"; // Query SQL untuk mengambil kategori dan nominal dari tabel transaksi
        try (Connection conn = DatabaseConnection.connect();  // Buka koneksi ke database
             Statement stmt = conn.createStatement(); // Buat objek Statement untuk menjalankan query
             ResultSet rs = stmt.executeQuery(sql)) { // Jalankan query dan simpan hasilnya di ResultSet
            // Loop untuk menghitung total pemasukan dan pengeluaran
            while (rs.next()) {
                int nominal = rs.getInt("nominal"); // Ambil nilai nominal (jumlah uang) dari database
                if (rs.getString("kategori").equals("Pemasukan")) { // Jika kategori adalah "Pemasukan"
                    totalPemasukan += nominal;  // Tambahkan nominal ke total pemasukan
                } else if (rs.getString("kategori").equals("Pengeluaran")) { // Jika kategori adalah "Pengeluaran"
                    totalPengeluaran += nominal; // Tambahkan nominal ke total pengeluaran
                }
            }
            // Tampilkan total pemasukan dan pengeluaran di jLabel7 dan jLabel9
            jLabel7.setText("Rp. " + totalPemasukan); // Set teks jLabel7 untuk menampilkan total pemasukan
            jLabel9.setText("Rp. " + totalPengeluaran); // Set teks jLabel9 untuk menampilkan total pengeluaran
        } catch (Exception e) {
            System.out.println(e.getMessage()); // Tampilkan pesan jika terjadi kesalahan dalam koneksi atau query
        }
    }
    
    private void filterData() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // Ambil model dari jTable1 untuk manipulasi data
        model.setRowCount(0); // Bersihkan data pada jTable1 sebelum menampilkan data yang difilter
        // Ambil kategori yang dipilih
        String kategoriFilter = jComboBox2.getSelectedItem().toString();
        
        // Ambil tanggal yang dipilih
        java.util.Date selectedDate = jDateChooser2.getDate();
        String formattedDate = null;
        if (selectedDate != null) {
            // Format tanggal menjadi yyyy-MM-dd jika tanggal dipilih
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            formattedDate = sdf.format(selectedDate);
        }
        // Jika kategori dan tanggal belum dipilih, hentikan proses filter
        if (jComboBox2.getSelectedIndex() == 0 && formattedDate == null) {
            return;
        }
        // Membuat query untuk mengambil data dari tabel transaksi
        String sql = "SELECT * FROM transaksi WHERE 1=1";
        
        // Menambahkan kondisi kategori jika kategori valid (bukan "Pilih Kategori")
        if (jComboBox2.getSelectedIndex() != 0) {
            sql += " AND kategori = '" + kategoriFilter + "'"; // Filter berdasarkan kategori
        }
        
        // Menambahkan kondisi tanggal jika tanggal dipilih
        if (formattedDate != null) {
            sql += " AND tanggal = '" + formattedDate + "'"; // Filter berdasarkan tanggal
        }
        try (Connection conn = DatabaseConnection.connect(); // Buka koneksi ke database
             Statement stmt = conn.createStatement(); // Buat objek Statement untuk menjalankan query
             ResultSet rs = stmt.executeQuery(sql)) { // Jalankan query dan simpan hasilnya di ResultSet
            // Menampilkan data yang sesuai di jTable1
            while (rs.next()) {
                String kategori = rs.getString("kategori"); // Ambil data kategori dari database
                int nominal = rs.getInt("nominal"); // Ambil data nominal dari database
                String tanggal = rs.getString("tanggal"); // Ambil data tanggal dari database
                String keterangan = rs.getString("keterangan"); // Ambil data keterangan dari database
                int id = rs.getInt("id"); // Ambil data id dari database
               // Tambahkan data yang difilter ke tabel
                model.addRow(new Object[]{kategori, nominal, tanggal, keterangan, id});
            }

        } catch (SQLException e) {
            // Tampilkan pesan jika terjadi kesalahan dalam koneksi atau query
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void resetFilters() {
        jComboBox2.setSelectedIndex(0);  // Set jComboBox2 ke pilihan awal
        jDateChooser2.setDate(null); // Kosongkan jDateChooser2 (tanggal)
        tampilkanData();  // Menampilkan kembali semua data di jTable1 tanpa filter, dengan memanggil fungsi tampilkanData()      
        jTextField1.setText("");  // Mengosongkan input pada jTextField1 (nominal transaksi)
        jDateChooser1.setDate(null); // Mengosongkan jDateChooser1 sehingga tanggal transaksi menjadi kosong
        jTextField2.setText(""); // Mengosongkan input pada jTextField2 (keterangan transaksi)
        jComboBox1.setSelectedIndex(0); // Mengatur jComboBox1 ke pilihan awal 
    }
    
    private void simpanDataKeCSV() {
        // Mendapatkan model dari jTable1 untuk membaca data yang akan disimpan
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        // Cek apakah jTable1 kosong
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Data masih kosong", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return; // Hentikan proses jika tidak ada data
        }
        
        // Membuat file chooser untuk memilih lokasi penyimpanan
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih lokasi penyimpanan file CSV");
        // Membatasi pilihan hanya untuk file dengan ekstensi CSV
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV files", "csv"));
        
        // Menampilkan dialog simpan dan memeriksa jika pengguna menekan tombol simpan
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
             // Mendapatkan file yang dipilih pengguna
            File fileToSave = fileChooser.getSelectedFile();
            // Menambahkan ekstensi .csv jika belum ada
            if (!fileToSave.getAbsolutePath().endsWith(".csv")) {
                fileToSave = new File(fileToSave + ".csv");
            }
            // Mencoba menulis data ke file CSV
            try (PrintWriter writer = new PrintWriter(fileToSave)) {
                int columnCount = model.getColumnCount();
                // Menulis header kolom ke file
                for (int i = 0; i < columnCount; i++) {
                    writer.print(model.getColumnName(i)); // Menulis nama kolom
                    if (i < columnCount - 1) writer.print(","); // Menambahkan koma kecuali pada kolom terakhir
                }
                writer.println(); // Pindah ke baris baru setelah header
                // Menulis data setiap baris
                for (int row = 0; row < model.getRowCount(); row++) {
                    for (int col = 0; col < columnCount; col++) {
                        writer.print(model.getValueAt(row, col).toString()); // Menulis data dari setiap sel
                        if (col < columnCount - 1) writer.print(","); // Menambahkan koma kecuali pada kolom terakhir
                    }
                    writer.println(); // Pindah ke baris baru setelah setiap baris data
                }
                 // Menampilkan pesan sukses setelah data berhasil disimpan
                JOptionPane.showMessageDialog(this, "Data berhasil disimpan ke file CSV.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                // Menampilkan pesan error jika terjadi masalah saat penyimpanan file
                JOptionPane.showMessageDialog(this, "Error saat menyimpan file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void resetData() {
         // Mendapatkan model dari jTable1 untuk akses data yang ditampilkan di tabel
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         // Cek apakah jTable1 kosong
         if (model.getRowCount() == 0) {
             JOptionPane.showMessageDialog(null, "Data masih kosong", "Peringatan", JOptionPane.WARNING_MESSAGE);
             return; // Hentikan proses jika tidak ada data
         }
        // Menampilkan pesan peringatan agar pengguna menyimpan data terlebih dahulu
         JOptionPane.showMessageDialog(null, 
             "Pastikan Anda sudah melakukan simpan data sebelum melakukan reset data.", 
             "Peringatan", JOptionPane.WARNING_MESSAGE);
         // Menampilkan konfirmasi sebelum menghapus data
         int response = JOptionPane.showConfirmDialog(null, 
             "Yakin ingin menghapus semua data?", "Konfirmasi", 
             JOptionPane.YES_NO_OPTION);
         // Jika pengguna memilih YA pada dialog konfirmasi
         if (response == JOptionPane.YES_OPTION) {
               // Menghubungkan ke database untuk menghapus semua data
             try (Connection conn = DatabaseConnection.connect();
                  Statement stmt = conn.createStatement()) {
                 // Query untuk menghapus semua data dari tabel transaksi
                 String sql = "DELETE FROM transaksi";
                 stmt.executeUpdate(sql); // Eksekusi query untuk menghapus data
                 // Menghapus semua baris dari jTable1
                 model.setRowCount(0); // Membersihkan tampilan tabel
                 // Mengatur ulang jLabel7 dan jLabel9 menjadi 0 untuk pemasukan dan pengeluaran
                 jLabel7.setText("0"); // Mengatur ulang total pemasukan
                 jLabel9.setText("0"); // Mengatur ulang total pengeluaran
                 // Menampilkan pesan sukses setelah semua data berhasil dihapus
                 JOptionPane.showMessageDialog(null, "Semua data berhasil dihapus.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
             } catch (SQLException e) {
                 // Menampilkan pesan error jika terjadi kesalahan saat menghapus data
                 JOptionPane.showMessageDialog(null, "Error saat menghapus data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
             }
         }
    }
    
    private void importData() {
        // Membuat file chooser untuk memilih file CSV
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih file CSV untuk diimpor");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV files", "csv"));

        // Jika pengguna memilih file
        int userSelection = fileChooser.showOpenDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToImport = fileChooser.getSelectedFile(); // Mendapatkan file yang dipilih

            try (BufferedReader br = new BufferedReader(new FileReader(fileToImport))) {
                // Konfirmasi penghapusan data yang sudah ada sebelum impor
                int confirm = JOptionPane.showConfirmDialog(this, 
                    "Mengimpor data baru akan menghapus semua data saat ini. Pastikan Anda sudah melakukan Simpan Data terlebih dahulu. Lanjutkan?", 
                    "Konfirmasi Impor Data", JOptionPane.YES_NO_OPTION);
                if (confirm != JOptionPane.YES_OPTION) {
                    return; // Batalkan impor jika pengguna memilih "NO"
                }

                // Kosongkan jTable1 dan database sebelum impor
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Mengosongkan jTable1

                // Hapus data di database
                try (Connection conn = DatabaseConnection.connect();
                     Statement stmt = conn.createStatement()) {
                    stmt.executeUpdate("DELETE FROM transaksi");
                }

                String line;
                boolean isFirstLine = true; // Untuk melewati header pada baris pertama jika ada
                Connection conn = DatabaseConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement("INSERT INTO transaksi (kategori, nominal, tanggal, keterangan) VALUES (?, ?, ?, ?)");

                // Format untuk menampilkan tanggal di jTable1
                SimpleDateFormat dateFormatForDisplay = new SimpleDateFormat("dd-MM-yyyy");
                // Format untuk menyimpan tanggal di database
                SimpleDateFormat dateFormatForDB = new SimpleDateFormat("yyyy-MM-dd");

                // Baca setiap baris file CSV
                while ((line = br.readLine()) != null) {
                    // Lewati header pada baris pertama jika ada
                    if (isFirstLine) {
                        isFirstLine = false;
                        continue;
                    }

                    // Memisahkan data berdasarkan koma (format CSV)
                    String[] values = line.split(",");
                    if (values.length == 5) { // Pastikan ada 5 kolom data, termasuk id
                        // Ambil data sesuai kolom (abaikan kolom id)
                        String kategori = values[0]; // Kategori di kolom pertama
                        int nominal = Integer.parseInt(values[1].trim()); // Nominal di kolom kedua
                        String tanggalString = values[2].trim(); // Tanggal di kolom ketiga
                        String keterangan = values[3].trim(); // Keterangan di kolom keempat

                        // Parse tanggal dari format dd-MM-yyyy (format tampilan yang diinginkan)
                        java.util.Date parsedDate = new SimpleDateFormat("dd-MM-yyyy").parse(tanggalString);
                        // Format tanggal menjadi yyyy-MM-dd untuk disimpan di database
                        String formattedDateForDB = dateFormatForDB.format(parsedDate);

                        // Tambahkan data ke jTable1 (tanpa kolom id), tampilkan tanggal dengan format dd-MM-yyyy
                        model.addRow(new Object[]{kategori, nominal, dateFormatForDisplay.format(parsedDate), keterangan});

                        // Simpan data ke database (tanpa kolom id)
                        pstmt.setString(1, kategori); // Menyimpan kategori
                        pstmt.setInt(2, nominal); // Menyimpan nominal
                        pstmt.setString(3, formattedDateForDB);  // Menyimpan tanggal dalam format yyyy-MM-dd
                        pstmt.setString(4, keterangan); // Menyimpan keterangan
                        pstmt.addBatch(); // Tambahkan ke batch query
                    }
                }

                pstmt.executeBatch(); // Menyimpan semua data yang diimpor ke database
                conn.close(); // Tutup koneksi database
                 // Menampilkan pesan sukses impor
                JOptionPane.showMessageDialog(this, "Data berhasil diimpor dari file CSV.", "Informasi", JOptionPane.INFORMATION_MESSAGE);

                // Update total pemasukan dan pengeluaran setelah data diimpor
                hitungTotal();

            } catch (Exception ex) {
                // Menangani jika terjadi kesalahan
                JOptionPane.showMessageDialog(this, "Error saat mengimpor data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
}